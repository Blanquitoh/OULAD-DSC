// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OuladEtlEda.DataAccess;

#nullable disable

namespace OuladEtlEda.Migrations
{
    [DbContext(typeof(OuladContext))]
    [Migration("20250610035127_CreateFullDomainView")]
    partial class CreateFullDomainView
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OuladEtlEda.Domain.Assessment", b =>
                {
                    b.Property<string>("CodeModule")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(0);

                    b.Property<string>("CodePresentation")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<int>("IdAssessment")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("AssessmentTypeEnum")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentTypeOrdinal")
                        .HasColumnType("int");

                    b.Property<int?>("Date")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CodeModule", "CodePresentation", "IdAssessment");

                    b.ToTable("assessments");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.Course", b =>
                {
                    b.Property<string>("CodeModule")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(0);

                    b.Property<string>("CodePresentation")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<int>("ModulePresentationLength")
                        .HasColumnType("int");

                    b.HasKey("CodeModule", "CodePresentation");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentAssessment", b =>
                {
                    b.Property<string>("CodeModule")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(0);

                    b.Property<string>("CodePresentation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<int?>("DateSubmitted")
                        .HasColumnType("int");

                    b.Property<int>("IdAssessment")
                        .HasColumnType("int")
                        .HasColumnOrder(3);

                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsBanked")
                        .HasColumnType("bit");

                    b.Property<float?>("Score")
                        .HasColumnType("real");

                    b.HasIndex("CodeModule", "CodePresentation", "IdAssessment");

                    b.HasIndex("CodeModule", "CodePresentation", "IdStudent");

                    b.ToTable("studentAssessment");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentInfo", b =>
                {
                    b.Property<string>("CodeModule")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(0);

                    b.Property<string>("CodePresentation")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<int>("AgeBand")
                        .HasColumnType("int");

                    b.Property<int>("Disability")
                        .HasColumnType("int");

                    b.Property<int>("FinalResult")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("HighestEducation")
                        .HasColumnType("int");

                    b.Property<string>("ImdBand")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<int?>("ImdBandOrdinal")
                        .HasColumnType("int");

                    b.Property<int>("NumOfPrevAttempts")
                        .HasColumnType("int");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("RegionOrdinal")
                        .HasColumnType("int");

                    b.Property<int>("StudiedCredits")
                        .HasColumnType("int");

                    b.HasKey("CodeModule", "CodePresentation", "IdStudent");

                    b.ToTable("studentInfo");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentRegistration", b =>
                {
                    b.Property<string>("CodeModule")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(0);

                    b.Property<string>("CodePresentation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<int?>("DateRegistration")
                        .HasColumnType("int");

                    b.Property<int?>("DateUnregistration")
                        .HasColumnType("int");

                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasIndex("CodeModule", "CodePresentation", "IdStudent");

                    b.ToTable("studentRegistration");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentVle", b =>
                {
                    b.Property<string>("CodeModule")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(2);

                    b.Property<string>("CodePresentation")
                        .IsRequired()
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(3);

                    b.Property<int?>("Date")
                        .HasColumnType("int");

                    b.Property<int>("IdSite")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("IdStudent")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("SumClick")
                        .HasColumnType("int");

                    b.HasIndex("CodeModule", "CodePresentation", "IdStudent");

                    b.HasIndex("IdSite", "CodeModule", "CodePresentation");

                    b.ToTable("studentVle");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.Vle", b =>
                {
                    b.Property<int>("IdSite")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<string>("CodeModule")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(1);

                    b.Property<string>("CodePresentation")
                        .HasMaxLength(45)
                        .IsUnicode(false)
                        .HasColumnType("varchar(45)")
                        .HasColumnOrder(2);

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)");

                    b.Property<int?>("ActivityTypeOrdinal")
                        .HasColumnType("int");

                    b.Property<int?>("WeekFrom")
                        .HasColumnType("int");

                    b.Property<int?>("WeekTo")
                        .HasColumnType("int");

                    b.HasKey("IdSite", "CodeModule", "CodePresentation");

                    b.HasIndex("CodeModule", "CodePresentation");

                    b.ToTable("vle");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.Assessment", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.Course", "Course")
                        .WithMany("Assessments")
                        .HasForeignKey("CodeModule", "CodePresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentAssessment", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodePresentation", "IdAssessment")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OuladEtlEda.Domain.StudentInfo", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodePresentation", "IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Assessment");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentInfo", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CodeModule", "CodePresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentRegistration", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodePresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OuladEtlEda.Domain.StudentInfo", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodePresentation", "IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("StudentInfo");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.StudentVle", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.StudentInfo", "StudentInfo")
                        .WithMany()
                        .HasForeignKey("CodeModule", "CodePresentation", "IdStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OuladEtlEda.Domain.Vle", "Vle")
                        .WithMany()
                        .HasForeignKey("IdSite", "CodeModule", "CodePresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StudentInfo");

                    b.Navigation("Vle");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.Vle", b =>
                {
                    b.HasOne("OuladEtlEda.Domain.Course", "Course")
                        .WithMany("Vles")
                        .HasForeignKey("CodeModule", "CodePresentation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("OuladEtlEda.Domain.Course", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Students");

                    b.Navigation("Vles");
                });
#pragma warning restore 612, 618
        }
    }
}
